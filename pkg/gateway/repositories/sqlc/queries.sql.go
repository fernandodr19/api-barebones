// Code generated by sqlc. DO NOT EDIT.
// source: queries.sql

package sqlc

import (
	"context"
)

const createAccount = `-- name: CreateAccount :one
INSERT INTO accounts (email, password)
VALUES ($1, $2)
RETURNING id
`

type CreateAccountParams struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (string, error) {
	row := q.db.QueryRow(ctx, createAccount, arg.Email, arg.Password)
	var id string
	err := row.Scan(&id)
	return id, err
}

const getAccountByEmail = `-- name: GetAccountByEmail :one
SELECT id, email, password, created_at, updated_at
FROM accounts
WHERE email = $1
`

func (q *Queries) GetAccountByEmail(ctx context.Context, email string) (Account, error) {
	row := q.db.QueryRow(ctx, getAccountByEmail, email)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAccountByID = `-- name: GetAccountByID :one
SELECT id, email, password, created_at, updated_at
FROM accounts
WHERE id = $1
`

func (q *Queries) GetAccountByID(ctx context.Context, id string) (Account, error) {
	row := q.db.QueryRow(ctx, getAccountByID, id)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.Email,
		&i.Password,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
