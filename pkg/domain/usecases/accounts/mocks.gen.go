// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package accounts

import (
	"context"
	"sync"
)

// AccountsMockUsecase is a mock implementation of Usecase.
//
//     func TestSomethingThatUsesUsecase(t *testing.T) {
//
//         // make and configure a mocked Usecase
//         mockedUsecase := &AccountsMockUsecase{
//             DoSomethingFunc: func(in1 context.Context) error {
// 	               panic("mock out the DoSomething method")
//             },
//         }
//
//         // use mockedUsecase in code that requires Usecase
//         // and then make assertions.
//
//     }
type AccountsMockUsecase struct {
	// DoSomethingFunc mocks the DoSomething method.
	DoSomethingFunc func(in1 context.Context) error

	// calls tracks calls to the methods.
	calls struct {
		// DoSomething holds details about calls to the DoSomething method.
		DoSomething []struct {
			// In1 is the in1 argument value.
			In1 context.Context
		}
	}
	lockDoSomething sync.RWMutex
}

// DoSomething calls DoSomethingFunc.
func (mock *AccountsMockUsecase) DoSomething(in1 context.Context) error {
	callInfo := struct {
		In1 context.Context
	}{
		In1: in1,
	}
	mock.lockDoSomething.Lock()
	mock.calls.DoSomething = append(mock.calls.DoSomething, callInfo)
	mock.lockDoSomething.Unlock()
	if mock.DoSomethingFunc == nil {
		var (
			out1 error
		)
		return out1
	}
	return mock.DoSomethingFunc(in1)
}

// DoSomethingCalls gets all the calls that were made to DoSomething.
// Check the length with:
//     len(mockedUsecase.DoSomethingCalls())
func (mock *AccountsMockUsecase) DoSomethingCalls() []struct {
	In1 context.Context
} {
	var calls []struct {
		In1 context.Context
	}
	mock.lockDoSomething.RLock()
	calls = mock.calls.DoSomething
	mock.lockDoSomething.RUnlock()
	return calls
}
